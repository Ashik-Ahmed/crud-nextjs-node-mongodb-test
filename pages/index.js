import Head from 'next/head'
import { getUsers, addUserToDB, updateUserHandle, handleDeleteUser } from '../lib/helper';
import { useQuery } from 'react-query';
import { FaEdit } from 'react-icons/fa';
import { MdDelete } from 'react-icons/md'
import { FiUserPlus } from 'react-icons/fi'
import { useState } from 'react';
import { useRouter } from 'next/router';

export default function Home({ users }) {

  // const [users, setUsers] = useState(null);
  const [add, setAdd] = useState(false);
  const [updateUser, setUpdateUser] = useState(null);
  const [deleteUser, setDeleteUser] = useState(null);

  const router = useRouter();

  // const { isLoading, isError, data, error, refetch } = useQuery('users', getUsers);

  // console.log(users);

  const refreshData = () => {
    router.replace(router.asPath);
  }


  const addUser = () => {
    console.log('Adding user')
    setAdd(!add);
    refreshData();
  }

  const handleSubmit = async (e) => {
    e.preventDefault();
    const name = e.target.name.value;
    const email = e.target.email.value;
    const website = e.target.website.value;

    const userInfo = {
      name,
      email,
      website
    }

    const result = await addUserToDB(userInfo)
    console.log(result);

    refreshData();
    e.target.reset();

  }

  const handleUpdate = (e) => {
    e.preventDefault();
    const updatedName = e.target.updateName.value || updateUser.name;
    const updatedEmail = e.target.updateEmail.value || updateUser.email;
    const updatedWebsite = e.target.updateWebsite.value || updateUser.website;

    const updatedUserData = {
      id: updateUser._id,
      name: updatedName,
      email: updatedEmail,
      website: updatedWebsite
    }

    // console.log(updatedUserData)
    updateUserHandle(updatedUserData, refreshData);
    e.target.reset();
    setUpdateUser(false);

  }

  const handleDelete = (id) => {

    handleDeleteUser(deleteUser, refreshData)


    setDeleteUser(null);
  }

  return (
    <div>
      <Head>
        <title>CRUD app - test</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className='flex flex-col justify-start items-start container mx-auto mt-12'>
        <div className='mx-auto'>
          <h2 className='text-4xl font-bold underline'>CRUD App</h2>
        </div>
        <div className='container my-2'>
          <div onClick={addUser} className='bg-gray-700 text-white text-lg p-2 rounded-md cursor-pointer inline-flex items-center gap-2'>
            <span>Add new User</span>
            <FiUserPlus size={20}></FiUserPlus>
          </div>
        </div>

        <div>
          {
            add &&
            <form onSubmit={handleSubmit} className='flex items-center space-x-4 my-8'>
              <div>
                <input name='name' type="text" placeholder='Name' className='bg-gray-200 w-full my-2 p-2 rounded' />
              </div>
              <div>
                <input name='email' type="email" placeholder='Email' className='bg-gray-200 w-full my-2 p-2 rounded' />
              </div>
              <div>
                <input name='website' type="text" placeholder='Website' className='bg-gray-200 w-full my-2 p-2 rounded' />
              </div>
              <div>
                <input type="submit" value='Add User' className='bg-green-500 py-2 px-4 text-lg font-bold text-white rounded-md cursor-pointer' />
              </div>
            </form>
          }
        </div>
        <div>
          {
            updateUser &&
            <form onSubmit={handleUpdate} className='flex items-center space-x-4 my-8'>
              <div>
                <input name='updateName' type="text" placeholder={updateUser.name || 'Name'} className='bg-gray-200 w-full my-2 p-2 rounded' />
              </div>
              <div>
                <input name='updateEmail' type="email" placeholder={updateUser.email || 'Email'} className='bg-gray-200 w-full my-2 p-2 rounded' />
              </div>
              <div>
                <input name='updateWebsite' type="text" placeholder={updateUser.website || 'Website'} className='bg-gray-200 w-full my-2 p-2 rounded' />
              </div>
              <div>
                <input type="submit" value='Update' className='bg-yellow-500 py-2 px-4 text-lg font-bold text-white rounded-md cursor-pointer' />
              </div>
            </form>
          }
        </div>

        <table className='table-auto container w-full mx-auto mb-12'>
          <thead className='bg-gray-700 text-white text-lg'>
            <tr className='w-full'>
              <td>Sl</td>
              <td>name</td>
              <td>Email</td>
              <td>Website</td>
              <td>Action</td>
            </tr>
          </thead>
          <tbody className='border'>
            {users &&
              users?.map((user, index) => (
                <>
                  <tr className='border-b'>
                    <td>{index + 1}</td>
                    <td>{user.name}</td>
                    <td>{user.email}</td>
                    <td>{user.website}</td>
                    <td className='flex justify-around'>
                      <FaEdit size={24} color='green' className='cursor-pointer' onClick={() => setUpdateUser(user)}></FaEdit>
                      <MdDelete size={28} color='rgb(255,50,50)' className='cursor-pointer' onClick={() => setDeleteUser(user)}> </MdDelete>
                      {
                        deleteUser &&

                        <div class="bg-slate-600 bg-opacity-10 flex justify-center items-center absolute top-0 right-0 bottom-0 left-0">
                          <div class="bg-white px-16 py-14 rounded-md text-center">
                            <h1 class="text-xl mb-4 font-bold text-slate-500">Do you Want to Delete?</h1>
                            <p className='text-xl font-semibold my-4 text-slate-500'>{deleteUser.name}</p>
                            <button onClick={() => setDeleteUser(null)} class="bg-red-500 px-4 py-2 rounded-md text-md text-white">Cancle</button>
                            <button onClick={() => handleDelete(deleteUser._id)} class="bg-indigo-500 px-7 py-2 ml-2 rounded-md text-md text-white font-semibold">Ok</button>
                          </div>
                        </div>
                      }
                    </td>
                  </tr>
                </>
              ))

            }
          </tbody>
        </table>
      </div>

    </div >
  )
}

export const getStaticProps = async (context) => {
  const users = await getUsers();
  // console.log(users)

  return {
    props: {
      users: JSON.parse(JSON.stringify(users)),
      // getStaticProps: JSON.parse(JSON.stringify(getStaticProps))
    }
  }
}